# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AddChatsPayload {
  chats(filter: ChatsFilter, first: Int, offset: Int, order: ChatsOrder): [Chats]
  numUids: Int
}

type AddMessagePayload {
  message(filter: MessageFilter, first: Int, offset: Int, order: MessageOrder): [Message]
  numUids: Int
}

type AddUserPayload {
  numUids: Int
  user(filter: UserFilter, first: Int, offset: Int, order: UserOrder): [User]
}

type Chats {
  notify: String!
  user1: String!
  user2: String!
}

type ChatsAggregateResult {
  count: Int
  notifyMax: String
  notifyMin: String
  user1Max: String
  user1Min: String
  user2Max: String
  user2Min: String
}

type DeleteChatsPayload {
  chats(filter: ChatsFilter, first: Int, offset: Int, order: ChatsOrder): [Chats]
  msg: String
  numUids: Int
}

type DeleteMessagePayload {
  message(filter: MessageFilter, first: Int, offset: Int, order: MessageOrder): [Message]
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  msg: String
  numUids: Int
  user(filter: UserFilter, first: Int, offset: Int, order: UserOrder): [User]
}

type Message {
  date: DateTime
  files: [String]
  id: ID!
  latitude: String
  longitude: String
  quoteMessageId: String
  readed: Boolean
  receiverUsername: String!
  senderUsername: String!
  text: String
  type: String!
}

type MessageAggregateResult {
  count: Int
  dateMax: DateTime
  dateMin: DateTime
  latitudeMax: String
  latitudeMin: String
  longitudeMax: String
  longitudeMin: String
  quoteMessageIdMax: String
  quoteMessageIdMin: String
  receiverUsernameMax: String
  receiverUsernameMin: String
  senderUsernameMax: String
  senderUsernameMin: String
  textMax: String
  textMin: String
  typeMax: String
  typeMin: String
}

type MultiPolygon {
  polygons: [Polygon!]!
}

type Mutation {
  addChats(input: [AddChatsInput!]!): AddChatsPayload
  addMessage(input: [AddMessageInput!]!): AddMessagePayload
  addUser(input: [AddUserInput!]!, upsert: Boolean): AddUserPayload
  deleteChats(filter: ChatsFilter!): DeleteChatsPayload
  deleteMessage(filter: MessageFilter!): DeleteMessagePayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  updateChats(input: UpdateChatsInput!): UpdateChatsPayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

type Point {
  latitude: Float!
  longitude: Float!
}

type PointList {
  points: [Point!]!
}

type Polygon {
  coordinates: [PointList!]!
}

type Query {
  aggregateChats(filter: ChatsFilter): ChatsAggregateResult
  aggregateMessage(filter: MessageFilter): MessageAggregateResult
  aggregateUser(filter: UserFilter): UserAggregateResult
  getMessage(id: ID!): Message
  getUser(username: String!): User
  queryChats(filter: ChatsFilter, first: Int, offset: Int, order: ChatsOrder): [Chats]
  queryMessage(filter: MessageFilter, first: Int, offset: Int, order: MessageOrder): [Message]
  queryUser(filter: UserFilter, first: Int, offset: Int, order: UserOrder): [User]
}

type Subscription {
  aggregateChats(filter: ChatsFilter): ChatsAggregateResult
  aggregateMessage(filter: MessageFilter): MessageAggregateResult
  aggregateUser(filter: UserFilter): UserAggregateResult
  getMessage(id: ID!): Message
  getUser(username: String!): User
  queryChats(filter: ChatsFilter, first: Int, offset: Int, order: ChatsOrder): [Chats]
  queryMessage(filter: MessageFilter, first: Int, offset: Int, order: MessageOrder): [Message]
  queryUser(filter: UserFilter, first: Int, offset: Int, order: UserOrder): [User]
}

type UpdateChatsPayload {
  chats(filter: ChatsFilter, first: Int, offset: Int, order: ChatsOrder): [Chats]
  numUids: Int
}

type UpdateMessagePayload {
  message(filter: MessageFilter, first: Int, offset: Int, order: MessageOrder): [Message]
  numUids: Int
}

type UpdateUserPayload {
  numUids: Int
  user(filter: UserFilter, first: Int, offset: Int, order: UserOrder): [User]
}

type User {
  age: Int
  bio: String
  lastAccess: DateTime!
  name: String!
  profile_img: String
  sex: String
  surname: String!
  username: String!
}

type UserAggregateResult {
  ageAvg: Float
  ageMax: Int
  ageMin: Int
  ageSum: Int
  bioMax: String
  bioMin: String
  count: Int
  lastAccessMax: DateTime
  lastAccessMin: DateTime
  nameMax: String
  nameMin: String
  profile_imgMax: String
  profile_imgMin: String
  sexMax: String
  sexMin: String
  surnameMax: String
  surnameMin: String
  usernameMax: String
  usernameMin: String
}

enum ChatsHasFilter {
  notify
  user1
  user2
}

enum ChatsOrderable {
  notify
  user1
  user2
}

enum DgraphIndex {
  bool
  day
  exact
  float
  fulltext
  geo
  hash
  hour
  int
  int64
  month
  regexp
  term
  trigram
  year
}

enum HTTPMethod {
  DELETE
  GET
  PATCH
  POST
  PUT
}

enum MessageHasFilter {
  date
  files
  latitude
  longitude
  quoteMessageId
  readed
  receiverUsername
  senderUsername
  text
  type
}

enum MessageOrderable {
  date
  latitude
  longitude
  quoteMessageId
  receiverUsername
  senderUsername
  text
  type
}

enum Mode {
  BATCH
  SINGLE
}

enum UserHasFilter {
  age
  bio
  lastAccess
  name
  profile_img
  sex
  surname
  username
}

enum UserOrderable {
  age
  bio
  lastAccess
  name
  profile_img
  sex
  surname
  username
}

input AddChatsInput {
  notify: String!
  user1: String!
  user2: String!
}

input AddMessageInput {
  date: DateTime
  files: [String]
  latitude: String
  longitude: String
  quoteMessageId: String
  readed: Boolean
  receiverUsername: String!
  senderUsername: String!
  text: String
  type: String!
}

input AddUserInput {
  age: Int
  bio: String
  lastAccess: DateTime!
  name: String!
  profile_img: String
  sex: String
  surname: String!
  username: String!
}

input AuthRule {
  and: [AuthRule]
  not: AuthRule
  or: [AuthRule]
  rule: String
}

input ChatsFilter {
  and: [ChatsFilter]
  has: [ChatsHasFilter]
  not: ChatsFilter
  notify: StringHashFilter
  or: [ChatsFilter]
  user1: StringHashFilter
  user2: StringHashFilter
}

input ChatsOrder {
  asc: ChatsOrderable
  desc: ChatsOrderable
  then: ChatsOrder
}

input ChatsPatch {
  notify: String
  user1: String
  user2: String
}

input ChatsRef {
  notify: String
  user1: String
  user2: String
}

input ContainsFilter {
  point: PointRef
  polygon: PolygonRef
}

input CustomHTTP {
  body: String
  forwardHeaders: [String!]
  graphql: String
  introspectionHeaders: [String!]
  method: HTTPMethod!
  mode: Mode
  secretHeaders: [String!]
  skipIntrospection: Boolean
  url: String!
}

input DateTimeFilter {
  between: DateTimeRange
  eq: DateTime
  ge: DateTime
  gt: DateTime
  in: [DateTime]
  le: DateTime
  lt: DateTime
}

input DateTimeRange {
  max: DateTime!
  min: DateTime!
}

input FloatFilter {
  between: FloatRange
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
}

input FloatRange {
  max: Float!
  min: Float!
}

input GenerateMutationParams {
  add: Boolean
  delete: Boolean
  update: Boolean
}

input GenerateQueryParams {
  aggregate: Boolean
  get: Boolean
  password: Boolean
  query: Boolean
}

input Int64Filter {
  between: Int64Range
  eq: Int64
  ge: Int64
  gt: Int64
  in: [Int64]
  le: Int64
  lt: Int64
}

input Int64Range {
  max: Int64!
  min: Int64!
}

input IntFilter {
  between: IntRange
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
}

input IntRange {
  max: Int!
  min: Int!
}

input IntersectsFilter {
  multiPolygon: MultiPolygonRef
  polygon: PolygonRef
}

input MessageFilter {
  and: [MessageFilter]
  date: DateTimeFilter
  has: [MessageHasFilter]
  id: [ID!]
  not: MessageFilter
  or: [MessageFilter]
  readed: Boolean
  receiverUsername: StringHashFilter
  senderUsername: StringHashFilter
}

input MessageOrder {
  asc: MessageOrderable
  desc: MessageOrderable
  then: MessageOrder
}

input MessagePatch {
  date: DateTime
  files: [String]
  latitude: String
  longitude: String
  quoteMessageId: String
  readed: Boolean
  receiverUsername: String
  senderUsername: String
  text: String
  type: String
}

input MessageRef {
  date: DateTime
  files: [String]
  id: ID
  latitude: String
  longitude: String
  quoteMessageId: String
  readed: Boolean
  receiverUsername: String
  senderUsername: String
  text: String
  type: String
}

input MultiPolygonRef {
  polygons: [PolygonRef!]!
}

input NearFilter {
  coordinate: PointRef!
  distance: Float!
}

input PointGeoFilter {
  near: NearFilter
  within: WithinFilter
}

input PointListRef {
  points: [PointRef!]!
}

input PointRef {
  latitude: Float!
  longitude: Float!
}

input PolygonGeoFilter {
  contains: ContainsFilter
  intersects: IntersectsFilter
  near: NearFilter
  within: WithinFilter
}

input PolygonRef {
  coordinates: [PointListRef!]!
}

input StringExactFilter {
  between: StringRange
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
  in: [String]
}

input StringRange {
  max: String!
  min: String!
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

input UpdateChatsInput {
  filter: ChatsFilter!
  remove: ChatsPatch
  set: ChatsPatch
}

input UpdateMessageInput {
  filter: MessageFilter!
  remove: MessagePatch
  set: MessagePatch
}

input UpdateUserInput {
  filter: UserFilter!
  remove: UserPatch
  set: UserPatch
}

input UserFilter {
  and: [UserFilter]
  has: [UserHasFilter]
  not: UserFilter
  or: [UserFilter]
  username: StringHashFilter
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

input UserPatch {
  age: Int
  bio: String
  lastAccess: DateTime
  name: String
  profile_img: String
  sex: String
  surname: String
}

input UserRef {
  age: Int
  bio: String
  lastAccess: DateTime
  name: String
  profile_img: String
  sex: String
  surname: String
  username: String
}

input WithinFilter {
  polygon: PolygonRef!
}


"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime
